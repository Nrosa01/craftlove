# vvvvvvvvvvvv You should probably specify the following values vvvvvvvvvvvv

# If the name is not specified it will use the containing directory's name
# or if the current directory is a part of a git repository, it will use the name of
# the directory containing the git repository.
# Specify this!
name = "Amazing Game"

# These are the files included in the .love file.
# The patterns are evaluated in the order they are specified. If they start with "-" they
# remove matching files from the current set of files. If they start with "+" or neither
# "+" nor "-", they will add matching files to the current set.
# The patterns use Python's fnmatch (which does not set FNM_PATHNAME), so asterisk
# will match slashes! I admit that these patterns behave a little weirdly.
# If you want to match a file in the root of the game directory, you need to do "./file"!
# "./" is prepended to all paths, so you can use "*/foobar" to match foobar in all directories,
# because "*foobar" would match "foofoobar" also.
# You can also specify a magic value called "::git-ls-tree::" which expands to all files
# tracked by git.
# The following is the default if the current working directory is in a git repository:
love_files = [
    "::git-ls-tree::",
    "-*/.*", # don't include hidden files
]
# If the current directory is not in a git repository, love_files will use all files
# in the current working directory except hidden files and the build directory.

# vvvvvvvvvvvv You may want to specify these too vvvvvvvvvvvv

# The version of the game. This is used to generate the build directory name
# It is also used as a env variable for conditional compilation if enabled.
# By default it is "1.0.0"
version = "0.1"

# The targets specified here are used if no targets are passed when craftlove is invoked.
# By default, the target is the platform craftlove
# Linux support is barebones, this tool was mainly made for Windows.
targets = ["windows", "linux"] # <- possible values for now

# By default this is "craftlove_build"
build_directory = "your_dir"

# This icon file will be used for the executables and the appimage.
# The executable requires an .ico or a file that can be used by rcedit
# There is currently no support for appimage icons
# By default it uses love.ico
icon_file = "icon.png"

# After the game directory file have been assembled and the .love file has been created
# the temporary game directory will be deleted, unless this parameter is true
keep_game_directory = false

# After the final executable have been created, the temporary build directory will be deleted
keep_artifacts = false

# This section specifies files to be excluded from the whole build process. Files here won't be used 
# neither in the .love file nor in the final executable.
exclude_files = ["metadata/*"]

[conditional_compilation]
# This enables conditional compilation. For more info check the README file
# It is disabled by default.
enabled = true
# This removes all assertions from the game. This is useful for release builds.
# This is part of the conditional compilation feature so it must be enabled for this to work.
# It is enabled by default.
remove_assertions = true

[env]
# This section specifies environment variables that will be set when the game is run.
# By default, there is the VERSION env variable that matches the version specified above.
# In build mode there is RELEASE by default and in run mode there is DEBUG by default.
FEATURE_A = true

# This section specifies additional files to be distributed alongside the game, but
# not as part of the .love file. See the platform specific versions of this section
# for details on their specific handling.
# The key is the relative (to the game directory) source path and the value is the
# destination path relative to the archive root.
# You may specify files or directories.
[archive_files]
"foo/bar/README.md" = "README.md"
"baz/baz/licenses" = "licenses" # directory
".itch.toml" = ".itch.toml"

# Unlike in makelove, hooks aren't currently supported.

[windows]

# This points to a directory containing an unpacked löve zip, just like official
# ones distributed on the löve website (containing an .exe, a bunch of .dlls).
love_binaries = "C/Program Files/LOVE/"

# This is either a single string value or a list of the possible values "archive" and "directory"
# If "archive" is specified a .zip file containing the fused exe, the archive files,
# .dlls and everything else is produced.
# If "directory" is specified a directory with the same contents is created.
# The default value of only "archive" implies that the directory will be deleted
# after the .zip has been built.
artifacts = "archive"

# The files specified here will be added in addition to the ones specified on top level.
# All specified files will simply be added to the .zip archive.
[windows.archive_files]

# Exe metadata is specified as a version string (key) and it's value
# The values shown here are the ones set by craftlove by default (you can overwrite them here)
# and the values in the comments are the original values in love.exe
# If you are not doing a versioned build, {version} is empty.
[windows.exe_metadata]
FileDescription = "{name} {version}" # "LÖVE {löve version}"
FileVersion = "{version}" # "{löve version}"
CompanyName = "" # "LÖVE World Domination Inc."
LegalCopyright = "" # "Copyright © 2006-2020 LÖVE Development Team" or ""
ProductName = "{name}" # "LÖVE"
ProductVersion = "<same as FileVersion>"
OriginalFilename = "<name of the generated .exe>" # "love.exe"